import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.List;
import java.util.ArrayList;

public class ArraySum {
    public static void main(String[] args) {
        int[] array = new int[1000];
        for (int i = 0; i < array.length; i++) {
            array[i] = i + 1; // Заполняем массив числами от 1 до 1000
        }
        // Количество потоков
        int threadCount = 4;
        // Создаем пул потоков
        ExecutorService executor = Executors.newFixedThreadPool(threadCount);
        // Создаем список задач
        List<Future<Integer>> futures = new ArrayList<>();
        int chunkSize = array.length / threadCount;

        for (int i = 0; i < threadCount; i++) {
            int start = i * chunkSize;
            int end = (i == threadCount - 1) ? array.length : start + chunkSize;

            // Добавляем задачи для вычисления суммы частей массива
            Callable<Integer> task = new ArraySumTask(array, start, end);
            futures.add(executor.submit(task));
        }

        // Суммируем результаты
        int totalSum = 0;
        for (Future<Integer> future : futures) {
            try {
                totalSum += future.get(); // Получаем результат выполнения задачи
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        // Завершаем работу пула потоков
        executor.shutdown();

        // Выводим итоговую сумму
        System.out.println("Total Sum: " + totalSum);
    }
}

class ArraySumTask implements Callable<Integer> {
    private int[] array;
    private int start;
    private int end;

    public ArraySumTask(int[] array, int start, int end) {
        this.array = array;
        this.start = start;
        this.end = end;
    }

    @Override
    public Integer call() {
        int sum = 0;
        for (int i = start; i < end; i++) {
            sum += array[i];
        }
        return sum;
    }
}
